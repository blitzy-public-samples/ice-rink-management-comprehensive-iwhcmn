version: '3.8'

services:
  api:
    build:
      context: ../../src/api
      dockerfile: ../infrastructure/docker/api.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - database
      - redis
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ../../src/frontend
      dockerfile: ../infrastructure/docker/frontend.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - api

  backend:
    build:
      context: ../../src/backend
      dockerfile: ../infrastructure/docker/backend.Dockerfile
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - database
      - redis

  database:
    image: postgres:13
    environment:
      - POSTGRES_DB=icerink_db
      - POSTGRES_USER=icerink_user
      - POSTGRES_PASSWORD=icerink_password
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:6-alpine
    volumes:
      - redisdata:/data

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  icerink_network:
    driver: bridge

# Human Tasks:
# - Review and update environment variables with actual production values (Critical)
# - Implement proper secrets management for sensitive information like database credentials (Critical)
# - Configure appropriate resource limits for each service (Required)
# - Set up logging drivers for centralized log management (Required)
# - Implement a reverse proxy or load balancer for the frontend and API services (Optional)
# - Configure backups for the database volume (Required)